// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActivityType {
  id         Int        @id @default(autoincrement())
  title      String
  activities Activity[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Activity {
  id Int @id @default(autoincrement())

  type   ActivityType @relation(fields: [typeId], references: [id])
  typeId Int

  initiator   Entity? @relation(name: "InitiatedActivities", fields: [initiatorId], references: [id])
  initiatorId Int?
  recipient   Entity? @relation(name: "ReceivedActivities", fields: [recipientId], references: [id])
  recipientId Int?
  lead        Lead?   @relation(fields: [leadId], references: [id])
  leadId      Int?
  // deal            Deal?            @relation(fields: [dealId], references: [id])
  // dealId          Int?

  call           Call?
  event          Event?
  email          Email?
  update         Update?
  message        Message?
  comment        Comment?
  systemActivity SystemActivity?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customFieldsValue Json @default("{}")

  @@index(fields: [leadId])
  @@index(fields: [typeId])
  @@index(fields: [initiatorId])
  @@index(fields: [recipientId])
  @@index([customFieldsValue(ops: JsonbPathOps)], type: Gin)
}

model SystemActivity {
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId Int      @unique

  title       String
  description String?

  @@id([activityId])
}

model Update {
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId Int      @unique

  model String
  field String

  before String?
  after  String?

  beforeIds Int[]
  afterIds  Int[]

  isPrimitive Boolean

  @@id([activityId])
}

model Comment {
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId Int      @unique

  text String

  @@id([activityId])
}

//
// base.prisma
//

model File {
  id         Int     @id @default(autoincrement())
  hash       String
  name       String
  size       Int
  mimeType   String
  path       String
  thumbnail  String?
  resolution String?
  caption    String?

  personAttachments      PersonAttachment[]
  messageAttachments     Message[]
  emailAttachments       Email[]
  emailDraftsAttachments EmailDraft[]
  personAvatars          Person[]
  mobileApp              MobileAppFile?
  callRecording          Call?
  chatPhoto              Chat?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hash])
}

model Animal {
  id        Int      @id @default(autoincrement())
  title     String
  fileName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id        Int      @id @default(autoincrement())
  title     String
  main      String
  secondary String?
  entities  Entity[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SystemPhone {
  id                Int       @id @default(autoincrement())
  phone             String
  secondaryPhone    String
  telegramId        String?
  reservedUntil     DateTime?
  reservedForLead   Lead?     @relation(fields: [reservedForLeadId], references: [id])
  reservedForLeadId Int?      @unique
  leads             Lead[]    @relation("LeadToContactedSystemPhone")
  calls             Call[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model MobileAppFile {
  id        Int      @id @default(autoincrement())
  version   String   @unique
  file      File?    @relation(fields: [fileId], references: [id])
  fileId    Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// call.prisma
//

model CallType {
  id        Int      @id @default(autoincrement())
  title     String
  icon      String
  calls     Call[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CallState {
  id        Int      @id @default(autoincrement())
  title     String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Call {
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId Int      @unique

  recordingFile   File? @relation(fields: [recordingFileId], references: [id])
  recordingFileId Int?  @unique

  callType      CallType     @relation(fields: [callTypeId], references: [id])
  callTypeId    Int
  systemPhone   SystemPhone? @relation(fields: [systemPhoneId], references: [id])
  systemPhoneId Int?

  activeFor Person?

  initiatedPhone String?
  recipientPhone String?
  startedAt      DateTime?
  endedAt        DateTime?
  declined       Boolean
  platformId     String?

  @@id([activityId])
  @@index([initiatedPhone, recipientPhone])
}

//
// chat.prisma
//

enum MessageType {
  service
  text
  photo
  audio
  video
  voice
  document
  contact
  location
  animation
  sticker
}

model Message {
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId Int      @unique

  type           MessageType
  platformId     String?
  media          File?       @relation(fields: [mediaId], references: [id])
  mediaId        Int?
  chat           Chat        @relation(fields: [chatId], references: [id])
  chatId         Int
  lastMessageFor Chat?       @relation("ChatLastMessage")

  text          String?
  formattedText String?
  actions       Json?
  score         Int?

  readBy Entity[]

  contacts String[]
  location Json?

  reply   Message?  @relation("MessageToMessage", fields: [replyId], references: [activityId])
  replyId Int?      @unique
  replies Message[] @relation("MessageToMessage")

  @@id([activityId])
}

model ChatPermission {
  // Experiment
  id    String @id
  title String

  chatTypes ChatType[]
}

enum ChatCategory {
  private
  group
  channel
}

model ChatType {
  id Int @id @default(autoincrement())

  title           String
  icon            String
  backgroundColor String
  category        ChatCategory

  chats        Chat[]
  contactTypes ContactType[]
  permissions  ChatPermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatParticipants {
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  entity    Entity   @relation(fields: [entityId], references: [id])
  entityId  Int
  contact   Contact? @relation(fields: [contactId], references: [id])
  contactId Int?
  blocked   Boolean

  @@id([chatId, entityId])
}

model Chat {
  id Int @id @default(autoincrement())

  platformId  String?
  archived    Boolean @default(false)
  deactivated Boolean @default(false)

  type   ChatType @relation(fields: [typeId], references: [id])
  typeId Int
  lead   Lead?    @relation(fields: [leadId], references: [id])
  leadId Int?
  pool   Pool?

  title   String?
  photo   File?   @relation(fields: [photoId], references: [id])
  photoId Int?    @unique

  participants ChatParticipants[]

  messages      Message[]
  lastMessage   Message?  @relation(name: "ChatLastMessage", fields: [lastMessageId], references: [activityId])
  lastMessageId Int?      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PoolOnUser {
  pool   Pool @relation(fields: [poolId], references: [id])
  poolId Int
  user   User @relation(fields: [userId], references: [personId])
  userId Int

  seen      Boolean
  selected  Boolean
  requested Boolean

  @@id([poolId, userId])
}

model Pool {
  id Int @id @default(autoincrement())

  archived  Boolean   @default(false)
  converted Boolean   @default(false)
  closeTime DateTime?

  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int  @unique

  agents PoolOnUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// contact.prisma
//

model ContactType {
  id        Int        @id @default(autoincrement())
  title     String
  contacts  Contact[]
  chatTypes ChatType[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Contact {
  id      Int     @id @default(autoincrement())
  deleted Boolean @default(false)

  type   ContactType @relation(fields: [typeId], references: [id])
  typeId Int

  createdBy   Entity? @relation(name: "CreatedContacts", fields: [createdById], references: [id])
  createdById Int?
  owner       Entity  @relation(fields: [ownerId], references: [id])
  ownerId     Int
  lead        Lead?   @relation(fields: [leadId], references: [id])
  leadId      Int?

  phoneContact   PhoneContact?
  emailContact   EmailContact?
  sessionContact SessionContact?

  chats        ChatParticipants[]
  emailThreads EmailThread[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customFieldsValue Json @default("{}")

  @@index(fields: [typeId])
  @@index(fields: [ownerId])
  @@index(fields: [createdById])
  @@index([customFieldsValue(ops: JsonbPathOps)], type: Gin)
}

model PhoneContact {
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int     @unique

  color            String
  phone            String?
  telegramId       String?
  telegramUsername String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([contactId])
  @@index([phone])
}

model EmailContact {
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int     @unique

  color String
  email String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([contactId])
  @@index([email])
}

model SessionContact {
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int     @unique

  cookie    String?
  sessionId String

  webhook   Webhook? @relation(fields: [webhookId], references: [id])
  webhookId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([contactId])
}

//
// custom_table.prisma
//

model CustomTable {
  id     Int    @id @default(autoincrement())
  title  String @unique
  schema Json

  values           CustomTableValue[]
  searchableFields String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomTableValue {
  id     Int  @id @default(autoincrement())
  values Json

  table   CustomTable @relation(fields: [tableId], references: [id])
  tableId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// deal.prisma
//

model Deal {
  id Int @id @default(autoincrement())

  itemType ItemType
  item     Item     @relation(fields: [itemId], references: [id])
  itemId   Int      @unique

  status   DealStatus @relation(fields: [statusId], references: [id])
  statusId Int
  type     DealType   @relation(fields: [typeId], references: [id])
  typeId   Int

  amount    Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DealStatus {
  id        Int      @id @default(autoincrement())
  title     String
  color     String
  step      Int
  deals     Deal[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DealType {
  id        Int      @id @default(autoincrement())
  title     String
  itemType  ItemType
  deals     Deal[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// email.prisma
//

model EmailThread {
  id          Int         @id @default(autoincrement())
  threadId    String
  subject     String
  emails      Email[]
  owner       Contact     @relation(fields: [ownerId], references: [id])
  ownerId     Int
  lastEmail   Email?      @relation("LastEmail", fields: [lastEmailId], references: [activityId])
  lastEmailId Int?        @unique
  emailDraft  EmailDraft?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailDraft {
  id Int @id @default(autoincrement())

  to          String[]
  cc          String[]
  bcc         String[]
  subject     String?
  body        String?
  replyTo     String?
  attachments File[]

  thread   EmailThread @relation(fields: [threadId], references: [id])
  threadId Int         @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Email {
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId Int      @unique

  messageId String
  replyTo   String?

  mailBox     String[]
  from        String
  to          String[]
  cc          String[]
  bcc         String[]
  emailTo     String[]
  subject     String
  text        String?
  html        String?
  attachments File[]
  readBy      Entity[]

  lastEmailForEmailThread EmailThread? @relation("LastEmail")
  thread                  EmailThread  @relation(fields: [threadId], references: [id])
  threadId                Int

  @@id([activityId])
}

//
// entity.prisma
//

model EntityType {
  id        Int      @id @default(autoincrement())
  title     String
  entities  Entity[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Entity {
  id       Int     @id @default(autoincrement())
  verified Boolean
  color    Color   @relation(fields: [colorId], references: [id])
  colorId  Int

  type   EntityType @relation(fields: [typeId], references: [id])
  typeId Int

  person  Person?
  company Company?

  initiatedActivities Activity[] @relation("InitiatedActivities")
  receivedActivities  Activity[] @relation("ReceivedActivities")

  createdContacts Contact[] @relation("CreatedContacts")
  contacts        Contact[]

  readMessages Message[]
  readEmails   Email[]

  chats ChatParticipants[]

  connections  Entity[] @relation("Connections")
  connection   Entity?  @relation("Connections", fields: [connectionId], references: [id])
  connectionId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([typeId])
}

enum PersonAttachmentType {
  PASSPORT
  OTHER
}

model PersonAttachment {
  person       Person               @relation(fields: [personId], references: [entityId], onDelete: Cascade, onUpdate: Cascade)
  personId     Int
  attachment   File                 @relation(fields: [attachmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attachmentId Int
  type         PersonAttachmentType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([personId, attachmentId])
}

model Person {
  entity   Entity @relation(fields: [entityId], references: [id])
  entityId Int    @unique

  displayName String
  firstName   String?
  secondName  String?
  lastName    String?
  birthDate   DateTime?

  user User?

  activeCall   Call? @relation(fields: [activeCallId], references: [activityId])
  activeCallId Int?  @unique
  avatar       File  @relation(fields: [avatarId], references: [id])
  avatarId     Int

  tags        Tag[]
  intentions  Lead[]
  attachments PersonAttachment[]

  customFieldsValue Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@id([entityId])
  @@index([customFieldsValue(ops: JsonbPathOps)], type: Gin)
}

model CompanyType {
  id        Int       @id @default(autoincrement())
  title     String
  companies Company[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Company {
  entity   Entity      @relation(fields: [entityId], references: [id])
  entityId Int         @unique
  type     CompanyType @relation(fields: [typeId], references: [id])
  typeId   Int

  title    String
  projects Project[]

  customFieldsValue Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@id([entityId])
  @@index([customFieldsValue(ops: JsonbPathOps)], type: Gin)
}

enum UserStatus {
  ONLINE
  OFFLINE
  DEACTIVATED
  FORCE_OFFLINE
  OVERDUE
  MEETING
}

model User {
  person   Person @relation(fields: [personId], references: [entityId])
  personId Int    @unique

  status UserStatus[] @default([OFFLINE])

  needsPasswordChange Boolean @default(false)
  password            String

  userSessions  UserSession[]
  userLocations UserLocation[]

  leads                     Lead[]
  pools                     PoolOnUser[]
  eventInvites              EventInvites[]
  leadSearchPresets         LeadSearchPreset[] @relation("LeadSearchPresetOwner")
  selectedLeadSearchPresets LeadSearchPreset[] @relation("LeadSearchPresetSelectedUser")

  headDepartments Department[]
  departments     DepartmentToUser[]
  roles           RoleToUser[]

  dailyQuota             Int @default(10)
  monthlyQuota           Int @default(100)
  afterDealQuota         Int @default(300)
  remainedDailyQuota     Int @default(10)
  remainedMonthlyQuota   Int @default(100)
  remainedAfterDealQuota Int @default(300)

  customFieldsValue Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@id([personId])
  @@index([customFieldsValue(ops: JsonbPathOps)], type: Gin)
}

model UserSession {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [personId])
  userId Int

  client      String
  ip          String
  meta        Json?     @default("{}")
  loggedOutAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLocation {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [personId])
  userId Int

  latitude  Float
  longitude Float
  altitude  Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// event.prisma
//

model EventAlertType {
  id        Int      @id @default(autoincrement())
  title     String
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventType {
  id        Int      @id @default(autoincrement())
  title     String
  event     Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FollowUpType {
  id             Int             @id @default(autoincrement())
  title          String
  color          String
  followUpEvents FollowUpEvent[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model FollowUpEvent {
  event   Event @relation(fields: [eventId], references: [activityId])
  eventId Int   @unique

  type   FollowUpType @relation(fields: [typeId], references: [id])
  typeId Int
  allDay Boolean      @default(false)

  @@id([eventId])
}

model MeetingEvent {
  event   Event @relation(fields: [eventId], references: [activityId])
  eventId Int   @unique

  showAsBusy Boolean @default(true)
  address    String
  latitude   Float?
  longitude  Float?

  @@id([eventId])
}

model EventInvites {
  event   Event @relation(fields: [eventId], references: [activityId])
  eventId Int
  user    User  @relation(fields: [userId], references: [personId])
  userId  Int

  accepted Boolean
  rejected Boolean

  @@id([eventId, userId])
}

model Event {
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId Int      @unique

  type   EventType @relation(fields: [typeId], references: [id])
  typeId Int

  title String
  notes String?

  eventDate    DateTime
  eventEndDate DateTime?

  isArchived Boolean @default(false)

  alert   EventAlertType? @relation(fields: [alertId], references: [id])
  alertId Int?

  followUp FollowUpEvent?
  meeting  MeetingEvent?

  invites       EventInvites[]
  invitedEmails String[]

  lastFollowUpLead Lead? @relation("LeadToLastFollowUp")

  @@id([activityId])
  @@index([isArchived, typeId])
}

//
// item.prisma
//

enum ItemType {
  furniture
  property
  car
}

model Item {
  id Int @id @default(autoincrement())

  deal     Deal?
  type     ItemType
  property Property?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Property {
  item   Item @relation(fields: [itemId], references: [id])
  itemId Int  @unique

  type      PropertyType @relation(fields: [typeId], references: [id])
  typeId    Int
  project   Project      @relation(fields: [projectId], references: [id])
  projectId Int          @unique

  unitId    String @unique
  title     String
  bedrooms  Int
  bathrooms Int?
  areaSize  Float

  @@id([itemId])
}

//
// lead.prisma
//

model Lead {
  id Int @id @default(autoincrement())

  seen        Boolean @default(false)
  isPotential Boolean @default(false)
  quality     Int     @default(0)

  itemType      ItemType
  budget        Float?
  sourceDetails String?

  reservedSystemPhone    SystemPhone?
  contactedSystemPhone   SystemPhone? @relation("LeadToContactedSystemPhone", fields: [contactedSystemPhoneId], references: [id])
  contactedSystemPhoneId Int?

  tags       Tag[]
  chats      Chat[]
  contacts   Contact[]
  activities Activity[]
  // deals                  Deal[]

  responsibleAgent   User?      @relation(fields: [responsibleAgentId], references: [personId])
  responsibleAgentId Int?
  person             Person     @relation(fields: [personId], references: [entityId])
  personId           Int
  status             LeadStatus @relation(fields: [statusId], references: [id])
  statusId           Int

  lastFollowUp   Event? @relation("LeadToLastFollowUp", fields: [lastFollowUpId], references: [activityId])
  lastFollowUpId Int?   @unique
  // listing                Listing?          @relation(fields: [listingId], references: [id])
  // listingId              Int?
  // distributionRule       DistributionRule? @relation(fields: [distributionRuleId], references: [id])
  // distributionRuleId     Int?

  webhookRequest    WebhookRequest?
  customFieldsValue Json            @default("{}")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([customFieldsValue(ops: JsonbPathOps)], type: Gin)
  @@index(fields: [createdAt(sort: Desc)])
  @@index(fields: [responsibleAgentId])
  @@index(fields: [statusId])
  @@index([isPotential])
}

model LeadStatus {
  id                Int                @id @default(autoincrement())
  title             String
  color             String
  backgroundColor   String
  step              Int
  leads             Lead[]
  leadSearchPresets LeadSearchPreset[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model SearchPeriod {
  id                Int                @id @default(autoincrement())
  title             String
  value             String // Pattern: "[+/-]_[int]_[days/weeks/months/years]"
  leadSearchPresets LeadSearchPreset[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model LeadSearchPreset {
  id       Int     @id @default(autoincrement())
  title    String
  isSystem Boolean

  seenLeads          Boolean?
  dateRangeForEvents Boolean? @default(false)
  ascending          Boolean? @default(false)

  statuses LeadStatus[]
  tags     Tag[]

  owner   User? @relation("LeadSearchPresetOwner", fields: [ownerId], references: [personId])
  ownerId Int?

  responsibleAgent   User? @relation("LeadSearchPresetSelectedUser", fields: [responsibleAgentId], references: [personId])
  responsibleAgentId Int?

  period   SearchPeriod? @relation(fields: [periodId], references: [id])
  periodId Int?
  from     DateTime?
  to       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// role.prisma
//

model Department {
  id          Int     @id @default(autoincrement())
  title       String
  description String?

  head    User?              @relation(fields: [headId], references: [personId])
  headId  Int?
  members DepartmentToUser[]

  parent   Department?  @relation("DepartmentToDepartment", fields: [parentId], references: [id])
  parentId Int?
  children Department[] @relation("DepartmentToDepartment")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DepartmentToUser {
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  user         User       @relation(fields: [userId], references: [personId])
  userId       Int
  role         Role?      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([departmentId, userId])
}

model Role {
  id          Int                @id @default(autoincrement())
  title       String
  description String?
  permissions Permission[]
  users       RoleToUser[]
  members     DepartmentToUser[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model RoleToUser {
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int
  user   User @relation(fields: [userId], references: [personId])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([roleId, userId])
}

enum PermissionType {
  TABLE
  INTERFACE
  BUSINESS_PROCESS
}

model Permission {
  id     Int            @id @default(autoincrement())
  role   Role           @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int
  type   PermissionType

  // For Table and Interface permission types 
  subject    String?
  properties Json?

  // For Business Process permission type
  businessProcess      BusinessProcess? @relation(fields: [businessProcessId], references: [id])
  businessProcessId    Int?
  businessProcessValue Boolean?         @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BusinessProcessEntity {
  LEAD
  DEAL
  USER
  CHAT
  POOL
  DEPARTMENT
  WEBHOOK
  OTHER
}

model BusinessProcess {
  id          Int                   @id @default(autoincrement())
  title       String
  description String?
  permissions Permission[]
  entity      BusinessProcessEntity
  code        String
  schema      Json

  webhooks Webhook[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// tag.prisma
//

enum TagCategoryType {
  SYSTEM
  AD_TAGS
  CUSTOM
}

model TagCategory {
  id            Int             @id @default(autoincrement())
  title         String
  type          TagCategoryType
  tags          Tag[]
  combineGroups Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

enum TagType {
  COUNTRY
  CITY
  NATIONALITY
  LANGUAGE

  AD_SOURCE
  CHANNEL_SOURCE
  WEB_SOURCE

  COMMUNITY
  PROJECT

  AD_TAG
  DEPARTMENT

  LEAD_INTENTION
  LEAD_SOURCE

  PROPERTY_TYPE
  PROPERTY_ROOM
  PROPERTY_AREA_SIZE

  CUSTOM
}

model Tag {
  id          Int     @id @default(autoincrement())
  conditional Boolean
  type        TagType

  leads             Lead[]
  people            Person[]
  webhooks          Webhook[]
  leadSearchPresets LeadSearchPreset[]
  // deals              Deal[]
  // rules              DistributionRule[]

  category   TagCategory? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  country       Country?     @relation(fields: [countryId], references: [id])
  countryId     Int?         @unique
  city          City?        @relation(fields: [cityId], references: [id])
  cityId        Int?         @unique
  nationality   Nationality? @relation(fields: [nationalityId], references: [id])
  nationalityId Int?         @unique
  language      Language?    @relation(fields: [languageId], references: [id])
  languageId    Int?         @unique

  adSource        AdSource?      @relation(fields: [adSourceId], references: [id])
  adSourceId      Int?           @unique
  channelSource   ChannelSource? @relation(fields: [channelSourceId], references: [id])
  channelSourceId Int?           @unique
  webSource       WebSource?     @relation(fields: [webSourceId], references: [id])
  webSourceId     Int?           @unique

  community   Community? @relation(fields: [communityId], references: [id])
  communityId Int?       @unique
  project     Project?   @relation(fields: [projectId], references: [id])
  projectId   Int?       @unique

  adTag           AdTag?         @relation(fields: [adTagId], references: [id])
  adTagId         Int?           @unique
  departmentTag   DepartmentTag? @relation(fields: [departmentTagId], references: [id])
  departmentTagId Int?           @unique

  leadIntention   LeadIntention? @relation(fields: [leadIntentionId], references: [id])
  leadIntentionId Int?           @unique
  leadSource      LeadSource?    @relation(fields: [leadSourceId], references: [id])
  leadSourceId    Int?           @unique

  propertyType       PropertyType?     @relation(fields: [propertyTypeId], references: [id])
  propertyTypeId     Int?              @unique
  propertyRoom       PropertyRoom?     @relation(fields: [propertyRoomId], references: [id])
  propertyRoomId     Int?              @unique
  propertyAreaSize   PropertyAreaSize? @relation(fields: [propertyAreaSizeId], references: [id])
  propertyAreaSizeId Int?              @unique

  customTag   CustomTag? @relation(fields: [customTagId], references: [id])
  customTagId Int?       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(fields: [type])
}

model CustomTag {
  id    Int    @id @default(autoincrement())
  title String
  value Json?
  tag   Tag?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdTag {
  id    Int     @id @default(autoincrement())
  tag   Tag?
  key   String
  value String
  field String?

  country    Country  @relation(fields: [countryId], references: [id])
  countryId  Int
  adSource   AdSource @relation(fields: [adSourceId], references: [id])
  adSourceId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DepartmentTag {
  id    Int    @id @default(autoincrement())
  title String
  tag   Tag?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id          Int    @id @default(autoincrement())
  title       String
  phoneCode   String
  emoji       String
  shortCode1  String @unique
  shortCode2  String @unique
  adWordsCode Int?   @unique

  nationality Nationality[]
  languages   Language[]
  adTag       AdTag[]
  cities      City[]
  tag         Tag?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id        Int     @id @default(autoincrement())
  title     String
  timezone  String
  offset    String
  offsetMs  Int
  country   Country @relation(fields: [countryId], references: [id])
  countryId Int
  tag       Tag?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Nationality {
  id        Int      @id @default(autoincrement())
  title     String
  country   Country? @relation(fields: [countryId], references: [id])
  countryId Int?
  tag       Tag?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Language {
  id        Int       @id @default(autoincrement())
  title     String
  native    String
  shortCode String
  countries Country[]
  tag       Tag?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Community {
  id    Int    @id @default(autoincrement())
  title String
  tag   Tag?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id         Int        @id @default(autoincrement())
  title      String
  tag        Tag?
  properties Property[]
  company    Company    @relation(fields: [companyId], references: [entityId])
  companyId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebSource {
  id    Int    @id @default(autoincrement())
  title String
  url   String @unique
  tag   Tag?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChannelSource {
  id    Int    @id @default(autoincrement())
  title String
  tag   Tag?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdSource {
  id     Int     @id @default(autoincrement())
  title  String
  adTags AdTag[]
  tag    Tag?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeadSource {
  id    Int    @id @default(autoincrement())
  title String
  tag   Tag?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeadIntention {
  id    Int    @id @default(autoincrement())
  title String
  tag   Tag?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyType {
  id    Int    @id @default(autoincrement())
  title String
  tag   Tag?

  properties Property[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyRoom {
  id    Int    @id @default(autoincrement())
  title String
  tag   Tag?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyAreaSize {
  id    Int    @id @default(autoincrement())
  title String
  tag   Tag?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// webhook.prisma
//

model Webhook {
  id Int @id @default(autoincrement())

  hookId      String  @unique
  title       String
  description String?

  tags              Tag[]
  sessions          SessionContact[]
  requests          WebhookRequest[]
  businessProcesses BusinessProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebhookRequest {
  id   Int  @id @default(autoincrement())
  body Json

  lead      Lead?   @relation(fields: [leadId], references: [id])
  leadId    Int?    @unique
  webhook   Webhook @relation(fields: [webhookId], references: [id])
  webhookId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
