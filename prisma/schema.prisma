generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id Int @id() @default(autoincrement())

  displayName String
  firstName   String?
  secondName  String?
  lastName    String?
  birthDate   DateTime?

  // avatar   File @relation(fields: [avatarId], references: [id])
  // avatarId Int

  intentions Lead[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Lead {
  person    Person     @relation(fields: [personId], references: [id])
  personId  Int
  id        Int        @id @default(autoincrement())
  seen      Boolean    @default(false)
  budget    Float?
  tags      Tag[]
  status    LeadStatus @relation(fields: [statusId], references: [id])
  statusId  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model EventType {
  id        Int      @id @default(autoincrement())
  title     String
  event     Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FollowUpType {
  id             Int             @id @default(autoincrement())
  title          String
  color          String
  followUpEvents FollowUpEvent[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model FollowUpEvent {
  event   Event        @relation(fields: [eventId], references: [id])
  eventId Int          @unique
  type    FollowUpType @relation(fields: [typeId], references: [id])
  typeId  Int

  @@id([eventId])
}

model MeetingEvent {
  event      Event   @relation(fields: [eventId], references: [id])
  eventId    Int     @unique
  showAsBusy Boolean @default(true)
  address    String
  latitude   Float?
  longitude  Float?

  @@id([eventId])
}

model Event {
  type         EventType      @relation(fields: [typeId], references: [id])
  typeId       Int
  id           Int            @id()
  title        String
  notes        String?
  eventDate    DateTime
  eventEndDate DateTime?
  followUp     FollowUpEvent?
  meeting      MeetingEvent?
}

// TAGS

model TagCategory {
  id        Int      @id @default(autoincrement())
  title     String
  tags      Tag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TagType {
  COUNTRY
  CITY
  NATIONALITY
  LANGUAGE
}

model Tag {
  id            Int          @id @default(autoincrement())
  type          TagType
  category      TagCategory? @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  country       Country?     @relation(fields: [countryId], references: [id])
  countryId     Int?         @unique
  city          City?        @relation(fields: [cityId], references: [id])
  cityId        Int?         @unique
  nationality   Nationality? @relation(fields: [nationalityId], references: [id])
  nationalityId Int?         @unique
  language      Language?    @relation(fields: [languageId], references: [id])
  languageId    Int?         @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Lead          Lead?        @relation(fields: [leadId], references: [id])
  leadId        Int?
}

model Country {
  id          Int           @id @default(autoincrement())
  title       String
  phoneCode   String
  emoji       String
  shortCode1  String        @unique
  shortCode2  String        @unique
  adWordsCode Int?          @unique
  nationality Nationality[]
  languages   Language[]
  cities      City[]
  tag         Tag?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model City {
  id        Int      @id @default(autoincrement())
  title     String
  timezone  String
  offset    String
  offsetMs  Int
  country   Country  @relation(fields: [countryId], references: [id])
  countryId Int
  tag       Tag?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Nationality {
  id        Int      @id @default(autoincrement())
  title     String
  country   Country? @relation(fields: [countryId], references: [id])
  countryId Int?
  tag       Tag?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Language {
  id        Int       @id @default(autoincrement())
  title     String
  native    String
  shortCode String
  countries Country[]
  tag       Tag?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model LeadStatus {
  id              Int      @id @default(autoincrement())
  title           String
  color           String
  backgroundColor String
  step            Int
  leads           Lead[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
